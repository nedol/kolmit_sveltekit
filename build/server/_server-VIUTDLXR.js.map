{
  "version": 3,
  "sources": ["../../.svelte-kit/adapter-node/entries/endpoints/api/edit_cc/_server.js"],
  "sourcesContent": ["import { p as pool } from \"../../../../chunks/mysql.js\";\nimport * as cookie from \"cookie\";\nimport nodemailer from \"nodemailer\";\nimport stringHash from \"string-hash\";\nimport { _ } from \"lodash\";\nimport \"mysql2/promise\";\nclass Email {\n  constructor() {\n    this.transporter = nodemailer.createTransport({\n      host: \"smtp.gmail.com\",\n      port: 465,\n      secure: true,\n      auth: {\n        user: \"nedol.kolmit@gmail.com\",\n        pass: \"fonjopvnigxpsxnx\"\n      }\n    });\n  }\n  SendMail(from, to, subj, html, cb) {\n    let mailOptions = {\n      from,\n      to,\n      subject: subj,\n      html\n    };\n    this.transporter.sendMail(mailOptions, function(error2, info) {\n      if (error2) {\n        cb({ err: error2 });\n        console.log(error2);\n      } else {\n        cb(\"Email sent: \" + info.response);\n        console.log(\"Email sent: \" + info.response);\n      }\n    });\n  }\n}\nglobal.rtcPull = { \"user\": {}, \"operator\": {} };\nasync function POST({ request, setHeaders, url }) {\n  let sql = \"\", vals = \"\";\n  let q = await request.json().then((data) => {\n    return data.par;\n  });\n  let [rows, fields] = \"\";\n  let err = \"\";\n  let headers = \"\";\n  switch (q.func) {\n    case \"operator\":\n      if (q.send_mail && q.psw) {\n        const ab = q.abonent ? q.abonent : q.send_mail;\n        vals = [q.psw, q.send_mail, ab];\n        sql = \"SELECT * FROM operators WHERE psw=? AND operator=? AND abonent=?\";\n        try {\n          [rows, fields] = await pool.query(sql, vals);\n          if (rows.length === 0) {\n            vals = [q.psw, q.send_mail, ab, '{\"name\": \"free\", \"start\": \"2021-12-14\"}'];\n            sql = \"INSERT INTO operators SET psw=?, operator=?, abonent=?, tarif=?\";\n            [rows, fields] = await pool.execute(sql, vals);\n            const cookieId = crypto.randomUUID();\n            headers = {\n              \"Set-cookie\": cookie.serialize(\n                \"session_id\",\n                cookieId,\n                {\n                  httpOnly: true,\n                  maxAge: 60 * 60 * 24 * 7,\n                  sameSite: \"lax\",\n                  path: \"/\"\n                }\n              )\n            };\n            SendEmail(q);\n          } else {\n          }\n        } catch (ex) {\n          if (ex.errno === 1062) {\n            err = ex;\n          }\n        }\n      }\n      return new Response(JSON.stringify({ rows, fields, err }));\n    case \"getusers\":\n      if (q.abonent) {\n        vals = [q.em, q.abonent, q.psw];\n        sql = \"SELECT tarif, users FROM operators, users WHERE operators.abonent = users.operator AND operators.operator=? AND operators.abonent=?  AND operators.psw=?\";\n      } else {\n        vals = [q.em, q.psw];\n        sql = \"SELECT tarif, users FROM operators, users WHERE operators.operator=users.operators.operator \";\n      }\n      try {\n        [rows, fields] = await pool.query(sql, vals);\n        if (rows[0]) {\n          let res = false;\n          let users2 = rows[0].users;\n          for (let d in users2) {\n            if (users2[d].admin.email === q.em) {\n              res = true;\n              break;\n            }\n            for (let s in users2[d].staff) {\n              if (users2[d].staff[s].email === q.em) {\n                res = true;\n                break;\n              }\n            }\n          }\n          if (res) {\n            rows = { tarif: rows[0].tarif, users: rows[0].users };\n          }\n        } else {\n          rows = { users: [] };\n        }\n      } catch (ex) {\n        console.log(ex.sql);\n        return new Response(JSON.stringify({ error: ex.message, users: [] }));\n      }\n      return new Response(JSON.stringify({ rows, fields, err }));\n    case \"addoper\":\n      vals = [q.abonent ? q.abonent : q.em, q.em, q.abonent ? q.abonent : \"\", q.psw];\n      sql = \"SELECT *, (SELECT users FROM users WHERE operator=?) as users FROM  operators as oper WHERE oper.operator=?  AND abonent=? AND psw=?\";\n      try {\n        [rows, fields] = await pool.query(sql, vals);\n        let usrs = [];\n        if (rows[0]) {\n          usrs = rows[0].users;\n          let dep = _.find(usrs, { \"id\": q.dep_id });\n          let item = { \"id\": dep.staff.length + 1, \"desc\": \"\", \"name\": \"\", \"role\": \"operator\", \"email\": \"\", \"picture\": { \"medium\": \"./src/routes/assets/operator.svg\" } };\n          dep.staff.push(item);\n          vals = [JSON.stringify(usrs), q.em, q.abonent || q.em];\n          sql = \"UPDATE users SET users=?, last=CURRENT_TIMESTAMP(), editor=? WHERE  operator=?\";\n          [rows, fields] = await pool.query(sql, vals);\n          return new Response(JSON.stringify({ func: q.func, dep }));\n        }\n      } catch (ex) {\n        return new Response(JSON.stringify({ error: ex.message }));\n      }\n    case \"changeoper\":\n      vals = [q.abonent ? q.abonent : q.em, q.em, q.abonent ? q.abonent : \"\", q.psw];\n      sql = \"SELECT *, (SELECT users FROM users WHERE operator=?) as users FROM  operators as oper WHERE oper.operator=?  AND abonent=? AND psw=?\";\n      try {\n        [rows, fields] = await pool.query(sql, vals);\n        let usrs = [];\n        if (rows[0]) {\n          usrs = rows[0].users;\n          let dep = _.find(usrs, { \"id\": q.dep_id });\n          let user;\n          if (q.data.role === \"admin\") {\n            user = dep[\"admin\"];\n          } else {\n            let ind = _.findIndex(dep.staff, { id: q.data.id });\n            user = dep.staff[ind];\n          }\n          if (q.data.alias)\n            user.alias = q.data.alias;\n          if (q.data.picture)\n            user.picture = q.data.picture;\n          if (q.data.email) {\n            if (q.data.email !== user.email)\n              SendEmail(q, q.data.email);\n            user.email = q.data.email;\n          }\n          if (q.data.name)\n            user.name = q.data.name;\n          if (q.data.desc)\n            user.desc = q.data.desc;\n          vals = [JSON.stringify(usrs), q.em, q.abonent || q.em];\n          sql = \"UPDATE users SET users=?, last=CURRENT_TIMESTAMP(), editor=? WHERE  operator=?\";\n          [rows, fields] = await pool.query(sql, vals);\n          return new Response(JSON.stringify({ func: q.func, dep }));\n        }\n      } catch (ex) {\n        return new Response(JSON.stringify({ error: ex.message }));\n      }\n    case \"remoper\":\n      vals = [q.abonent ? q.abonent : q.em, q.em, q.abonent ? q.abonent : \"\", q.psw];\n      sql = \"SELECT *, (SELECT users FROM users WHERE operator=?) as users FROM  operators as oper WHERE oper.operator=?  AND abonent=? AND psw=?\";\n      try {\n        [rows, fields] = await pool.query(sql, vals);\n        let usrs = [];\n        if (rows[0]) {\n          usrs = rows[0].users;\n          let dep = _.find(usrs, { \"id\": q.dep });\n          let ind = _.findIndex(dep.staff, { id: q.id });\n          dep.staff.splice(ind, 1);\n          vals = [JSON.stringify(usrs), q.em, q.abonent || q.em];\n          sql = \"UPDATE users SET users=?, last=CURRENT_TIMESTAMP(), editor=? WHERE  operator=?\";\n          [rows, fields] = await pool.query(sql, vals);\n          return new Response(JSON.stringify({ func: q.func, dep }));\n        }\n      } catch (ex) {\n        return new Response(JSON.stringify({ error: ex.message }));\n      }\n    case \"adddep\":\n      vals = [q.abonent ? q.abonent : q.em, q.em, q.abonent, q.psw];\n      sql = \"SELECT *, (SELECT users FROM users WHERE operator=?) as users FROM  operators as oper WHERE oper.operator=?  AND abonent=? AND psw=?\";\n      try {\n        [rows, fields] = await pool.query(sql, vals);\n        let users2 = [];\n        if (rows[0]) {\n          users2 = rows[0].users;\n          let ind = _.findIndex(users2, { \"id\": String(q.id) });\n          if (ind === -1)\n            return;\n          users2[q.id + 1] = {\n            \"id\": String(q.id + 1),\n            \"alias\": \"\",\n            \"admin\": { \"desc\": \"\", \"name\": \"\", \"role\": \"admin\", \"email\": \"\", \"picture\": { \"medium\": \"./src/routes/assets/operator.svg\" } },\n            \"staff\": []\n          };\n          vals = [JSON.stringify(users2), q.em, q.abonent || q.em];\n          sql = \"UPDATE users SET users=?, last=CURRENT_TIMESTAMP(), editor=? WHERE  operator=?\";\n          [rows, fields] = await pool.query(sql, vals);\n          return new Response(JSON.stringify({ func: q.func, dep: users2[q.id + 1] }));\n        }\n      } catch (ex) {\n        return new Response(JSON.stringify({ error: ex.message }));\n      }\n    case \"changedep\":\n      vals = [q.abonent, q.em, q.psw];\n      sql = \"SELECT users FROM operators as oper, users as usr WHERE usr.operator=oper.abonent AND oper.abonent=? AND oper.operator=? AND oper.psw=?\";\n      try {\n        [rows, fields] = await pool.query(sql, vals);\n        if (rows[0]) {\n          let users2 = rows[0].users;\n          let ind = _.findIndex(users2, { \"id\": String(q.dep.id) });\n          if (ind === -1)\n            return;\n          users2[ind] = q.dep;\n          vals = [JSON.stringify(users2), q.em, q.abonent || q.em];\n          sql = \"UPDATE users SET users=?, last=CURRENT_TIMESTAMP(), editor=? WHERE  operator=? \";\n          [rows, fields] = await pool.query(sql, vals);\n          return new Response(JSON.stringify({ dep: users2[ind], fields, err }));\n        }\n      } catch (ex) {\n        return new Response(JSON.stringify({ error: ex.message }));\n      }\n    case \"remdep\":\n      vals = [q.em, q.psw];\n      let query = \"SELECT users FROM operators as oper, users as usr WHERE usr.operator=oper.abonent AND oper.operator=? AND oper.psw=?\";\n      try {\n        [rows, fields] = await pool.query(query, vals);\n        if (rows[0]) {\n          let users2 = rows[0].users;\n          _.remove(users2, (n) => {\n            return n.id === q.dep;\n          });\n          vals = [JSON.stringify(users2), q.em, q.abonent || q.em];\n          query = \"UPDATE users SET users=?, last=CURRENT_TIMESTAMP(), editor=? WHERE  operator=? \";\n          [rows, fields] = await pool.query(query, vals);\n          return new Response(JSON.stringify({ users: users2, fields, err }));\n        }\n      } catch (ex) {\n        return new Response(JSON.stringify({ error: ex.message }));\n      }\n    case \"tarif\":\n      let tarif = tarifs[q.tarif];\n      let users = [\n        {\n          \"id\": \"0\",\n          \"admin\": {\n            \"desc\": \"Admin of admins\",\n            \"name\": \"\",\n            \"alias\": \"\",\n            \"role\": \"admin\",\n            \"email\": q.em,\n            \"picture\": {\n              \"medium\": \"./src/routes/assets/operator.svg\"\n            }\n          },\n          \"staff\": []\n        }\n      ];\n      let paid = moment().add(tarif.trial, \"days\").format(\"YYYY-MM-DD\");\n      let start = moment().format(\"YYYY-MM-DD\");\n      vals = [q.tarif, start, paid, q.em, q.psw, JSON.stringify(users)];\n      sql = \"call ADD_NEW_TARIF(?,?,?,?,?,?)\";\n      [rows, fields] = await pool.query(sql, vals);\n      return new Response(JSON.stringify({ rows, fields, err }));\n  }\n}\nfunction SendEmail(q, new_email) {\n  let em = new Email();\n  const abonent = q.abonent ? \"&abonent=\" + q.abonent : \"\";\n  const mail = q.send_mail || new_email;\n  const hash = stringHash(mail);\n  let text = { ru: \"<h1>\\u041F\\u0440\\u0438\\u0441\\u043E\\u0435\\u0434\\u0438\\u043D\\u0438\\u0442\\u044C\\u0441\\u044F \\u043A \\u0441\\u0435\\u0442\\u0438</h1></a>\", en: \"<h1>Join network</h1></a>\", fr: \"<h1>Rejoindre le r\\xE9seau</h1></a>\" }[q.lang];\n  let html = \"<div><a href='http://nedol.ru/kolmit/site/operator.html?operator=\" + (q.send_mail || new_email) + abonent + \"&hash=\" + hash + \"'>\" + text + \"</a></div>\";\n  em.SendMail(\n    \"nedol.kolmit@gmail.com\",\n    q.send_mail || new_email,\n    {\n      ru: \"\\u041D\\u043E\\u0432\\u044B\\u0439 \\u043E\\u043F\\u0435\\u0440\\u0430\\u0442\\u043E\\u0440 \\u0441\\u0435\\u0442\\u0438 \\u041A\\u043E\\u043B\\u043C\\u0438\",\n      en: \"New Kolmi network operator\",\n      fr: \"Le nouvel op\\xE9rateur de Kolmi\"\n    }[q.lang],\n    html,\n    (result) => {\n      console.log();\n    }\n  );\n}\nfunction GET({ url }) {\n  const min = Number(url.searchParams.get(\"min\") ?? \"0\");\n  const max = Number(url.searchParams.get(\"max\") ?? \"1\");\n  const d = max - min;\n  if (isNaN(d) || d < 0) {\n    throw error(400, \"min and max must be numbers, and min must be less than max\");\n  }\n  const random = min + Math.random() * d;\n  return new Response(String(random));\n}\nexport {\n  GET,\n  POST\n};\n"],
  "mappings": "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",
  "names": []
}
