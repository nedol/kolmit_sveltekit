import { json } from '@sveltejs/kit';
import Redis from 'ioredis'; // Подключаем библиотеку Redis

let abonent, em;
let redis_sub;
let rtcPool;
// import { redis_st, redis_sub_st } from '$lib/js/stores.js';
// redis_st.subscribe(async (data) => {
// 	redis = data;
// });

// redis_sub_st.subscribe(async (data) => {
// 	redis_sub = data;
// });
redis_sub = new Redis({
	host: 'redis-12514.c299.asia-northeast1-1.gce.cloud.redislabs.com', // Укажите хост вашей базы данных Redis
	port: 12514, // Укажите порт Redis
	password: 'hm03yGDkx4QKZXDJzmiCfW0EiFm7PB1z',
	connectTimeout: 10000
});

// const redis = new Redis({
// 	host: 'redis-12514.c299.asia-northeast1-1.gce.cloud.redislabs.com', // Укажите хост вашей базы данных Redis
// 	port: 12514, // Укажите порт Redis
// 	password: 'hm03yGDkx4QKZXDJzmiCfW0EiFm7PB1z',
// 	connectTimeout: 10000
// });

export const config = {
	// runtime: 'edge'
	// isr: {
	// 	expiration: false // 10
	// }
};

/** @type {import('./$types').RequestHandler} */
export async function POST(event) {
	const { par } = await event.request.json();
	const q = par;
	let resp;

	abonent = q.abonent;
	em = q.em;

	redis_sub.subscribe(q.type + ':' + q.abonent + ':' + q.em, (err, count) => {
		if (err) {
			console.error('Ошибка при подписке на канал:', err);
		} else {
			// console.log(
			// 	`Подписались на канал ${
			// 		q.type + ':' + q.abonent + ':' + q.em
			// 	}. Количество подписчиков: ${count}`
			// );
		}
	});

	switch (q.func) {
		case 'callwaiting':
			try {
				let promise = new Promise((resolve, reject) => {
					// if (rtcPool[q.type][q.abonent][q.em].post_resolve)
					// 	rtcPool[q.type][q.abonent][q.em].post_resolve(resolve);
					CallWaiting(q, resolve);
				});
				resp = await promise;
			} catch (ex) {
				console.log('callwaiting' + ex);
			}
			break;
	}
	redis_sub.unsubscribe(q.type + ':' + q.abonent + ':' + q.em);
	let response = new Response(JSON.stringify({ resp }));
	response.headers.append('Access-Control-Allow-Origin', `*`);
	return response;
}

async function CallWaiting(q, resolve) {
	try {
		console.log('CallWaiting:' + q.em);
		redis_sub.on('message', (channel, message) => {
			console.log(`Получено сообщение из канала ${channel}`); //: ${message}`);
			let chAr = channel.split(':');
			if (chAr[1] === abonent && chAr[2] === em) {
				resolve(JSON.parse(message));
			} else {
				console.log();
			}
		});
	} catch (e) {
		console.log();
	}
}
